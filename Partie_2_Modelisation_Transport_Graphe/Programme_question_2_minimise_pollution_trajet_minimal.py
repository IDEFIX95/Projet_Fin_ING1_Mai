import pandas as pd 
import networkx as nx
import numpy as np
from geopy.distance import geodesic
from itertools import combinations
from heapq import heappush, heappop

# === 1. Charger les donn√©es ===
file_path = "H:/Documents/ING1/Projet_Mai_2025/fichier_entierement_filtr√©.csv"
df = pd.read_csv(file_path, sep=';', encoding='utf-8')

# === 2. Nettoyer la pollution : transformer le texte en score num√©rique ===
# Faible = 1, Mod√©r√©e = 2, √âlev√©e = 3, Inconnue = 2 (par d√©faut)
def pollution_score(pollution_text):
    if isinstance(pollution_text, str):
        pollution_text = pollution_text.lower()
        if "faible" in pollution_text:
            return 1
        elif "mod√©r√©e" in pollution_text or "modere" in pollution_text:
            return 2
        elif "√©lev√©e" in pollution_text or "elevee" in pollution_text:
            return 3
    return 2

df['pollution_score'] = df['pollution_finale'].apply(pollution_score)

# === 3. Supprimer les stations sans coordonn√©es GPS ===
df = df.dropna(subset=['stop_lat', 'stop_lon'])

# === 4. Construire le graphe ===
G = nx.Graph()

# Ajouter chaque station comme n≈ìud avec : pollution, coordonn√©es, ligne
for _, row in df.iterrows():
    G.add_node(
        row['nom de la station'],
        pollution=row['pollution_score'],
        coords=(row['stop_lat'], row['stop_lon']),
        ligne=row['nom de la ligne']
    )

# === 5. Relier les stations proches sur la m√™me ligne ===
# Pour chaque ligne, on connecte les stations proches (‚â§ 2km pour m√©tro, ‚â§ 6km pour RER)
for line in df['nom de la ligne'].unique():
    stations_line = df[df['nom de la ligne'] == line]
    
    seuil_km = 6.0 if "rer" in line.lower() else 2.0

    # On teste toutes les paires de stations de cette ligne
    for (idx1, row1), (idx2, row2) in combinations(stations_line.iterrows(), 2):
        s1 = row1['nom de la station']
        s2 = row2['nom de la station']
        if s1 != s2:
            coord1 = (row1['stop_lat'], row1['stop_lon'])
            coord2 = (row2['stop_lat'], row2['stop_lon'])
            dist = geodesic(coord1, coord2).km
            if dist <= seuil_km:
                travel_time = dist / 0.5  # 30 km/h ‚âà 0.5 km/min
                pol_score = (row1['pollution_score'] + row2['pollution_score']) / 2
                G.add_edge(s1, s2, time=travel_time, pollution=pol_score, ligne=line)

# === 6. Afficher la liste des stations disponibles √† l'utilisateur ===
stations = sorted(G.nodes)
print("\nüìç Liste des stations disponibles :")
for i, station in enumerate(stations):
    print(f"{i}. {station}")

# === 7. Demander √† l'utilisateur la station de d√©part, d'arriv√©e et le temps max ===
try:
    idx_depart = int(input("\nüîπ Num√©ro de la station de d√©part : "))
    idx_arrivee = int(input("üîπ Num√©ro de la station d'arriv√©e : "))
    max_time = float(input("‚è±Ô∏è Temps maximum autoris√© (en minutes) : "))
except ValueError:
    print("‚ùå Entr√©e invalide. Veuillez entrer des num√©ros et un temps correct.")
    exit()

# V√©rification de la validit√© des entr√©es
if idx_depart < 0 or idx_depart >= len(stations) or idx_arrivee < 0 or idx_arrivee >= len(stations):
    print("‚ùå Num√©ro de station invalide.")
    exit()

start = stations[idx_depart]
end = stations[idx_arrivee]

# V√©rifie si un chemin est possible dans le graphe
if not nx.has_path(G, start, end):
    print("‚ùå Il n'existe aucun chemin entre ces deux stations dans le graphe.")
    exit()

# === 8. Fonction de recherche : chemin le moins pollu√© sous contrainte de temps (algo modifi√© de Dijkstra) ===
def chemin_le_moins_pollue(G, start, end, temps_max):
    heap = [(0, 0, start, [start])]  # (pollution cumul√©e, temps total, station actuelle, chemin suivi)
    visited = set()

    while heap:
        pollution, temps, current, path = heappop(heap)

        # Si on atteint la destination, on retourne le chemin et stats
        if current == end:
            pollution_moy = pollution / (len(path) - 1) if len(path) > 1 else 0
            return path, temps, pollution_moy

        # √âvite de revisiter avec un temps d√©j√† explor√©
        if (current, round(temps, 2)) in visited:
            continue
        visited.add((current, round(temps, 2)))

        # Explorer les voisins
        for neighbor in G.neighbors(current):
            edge = G[current][neighbor]
            temps_suivant = temps + edge['time']
            if temps_suivant <= temps_max:
                pol_suiv = pollution + edge['pollution']
                heappush(heap, (pol_suiv, temps_suivant, neighbor, path + [neighbor]))

    return None  # Aucun chemin trouv√©

# === 9. Ex√©cution de la recherche et affichage des r√©sultats ===
result = chemin_le_moins_pollue(G, start, end, max_time)

if result:
    path, total_time, avg_pollution = result
    print("\n‚úÖ Meilleur chemin trouv√© :")
    print(" ‚Üí ".join(path))
    print(f"üïì Temps estim√© : {round(total_time, 2)} min")
    print(f"üå´Ô∏è Pollution moyenne : {round(avg_pollution, 2)}")
else:
    print("‚ùå Aucun chemin trouv√© dans le temps imparti.")
